ylab="Energy sub metering",
xlab="")
lines(data3$DateTime,data3$Sub_metering_2,col="red")
lines(data3$DateTime,data3$Sub_metering_3,col="blue")
legend("topright",
c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
,col=c("black","red","blue"),
lty=1,
lwd=1.5)
?legend
legend("topright",
c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
,col=c("black","red","blue"),
lty=1,
lwd=1.5,
border="")
par(mfrow=c(2,2))
plot(data3$DateTime,data3$Global_active_power,type="l",
ylab="Global Active Power (kilowatts)",
xlab="")
plot(data3$DateTime,data3$Sub_metering_1,type="l",
ylab="Energy sub metering",
xlab="")
lines(data3$DateTime,data3$Sub_metering_2,col="red")
lines(data3$DateTime,data3$Sub_metering_3,col="blue")
legend("topright",
c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
,col=c("black","red","blue"),
lty=1,
lwd=1.5,
border="")
?legend
par(mfrow=c(2,2))
plot(data3$DateTime,data3$Global_active_power,type="l",
ylab="Global Active Power (kilowatts)",
xlab="")
plot(data3$DateTime,data3$Sub_metering_1,type="l",
ylab="Energy sub metering",
xlab="")
lines(data3$DateTime,data3$Sub_metering_2,col="red")
lines(data3$DateTime,data3$Sub_metering_3,col="blue")
legend("topright",
c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
,col=c("black","red","blue"),
lty=1,
lwd=1.5,
fill="white"
border="")
par(mfrow=c(2,2))
plot(data3$DateTime,data3$Global_active_power,type="l",
ylab="Global Active Power (kilowatts)",
xlab="")
plot(data3$DateTime,data3$Sub_metering_1,type="l",
ylab="Energy sub metering",
xlab="")
lines(data3$DateTime,data3$Sub_metering_2,col="red")
lines(data3$DateTime,data3$Sub_metering_3,col="blue")
legend("topright",
c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
,col=c("black","red","blue"),
lty=1,
lwd=1.5,
fill=""
border="")
par(mfrow=c(2,2))
plot(data3$DateTime,data3$Global_active_power,type="l",
ylab="Global Active Power (kilowatts)",
xlab="")
plot(data3$DateTime,data3$Sub_metering_1,type="l",
ylab="Energy sub metering",
xlab="")
lines(data3$DateTime,data3$Sub_metering_2,col="red")
lines(data3$DateTime,data3$Sub_metering_3,col="blue")
legend("topright",
c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
,col=c("black","red","blue"),
lty=1,
lwd=1.5,
fill="",
border="")
par(mfrow=c(2,2))
plot(data3$DateTime,data3$Global_active_power,type="l",
ylab="Global Active Power (kilowatts)",
xlab="")
plot(data3$DateTime,data3$Sub_metering_1,type="l",
ylab="Energy sub metering",
xlab="")
lines(data3$DateTime,data3$Sub_metering_2,col="red")
lines(data3$DateTime,data3$Sub_metering_3,col="blue")
legend("topright",
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"),
lty=1,
lwd=1.5,
fill="",
border="")
par(mfrow=c(2,2))
plot(data3$DateTime,data3$Global_active_power,type="l",
ylab="Global Active Power (kilowatts)",
xlab="")
plot(data3$DateTime,data3$Sub_metering_1,type="l",
ylab="Energy sub metering",
xlab="")
lines(data3$DateTime,data3$Sub_metering_2,col="red")
lines(data3$DateTime,data3$Sub_metering_3,col="blue")
legend("topright",
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"),
lty=1,
lwd=1.5)
?rexp
rand_exp <- matrix(rexp(4000,rate=.2),1000,40)
head(rand_exp)
rand_exp_avg <- rowMeans(rand_exp)
head(rand_exp_avg)
mean(rand_exp_avg)
variance(rand_exp_avg)
hist(rand_exp_avg)
abline(v=5,col="red")
abline(v=mean(rand_exp_avg),col="blue")
lines(density(row_means))
lines(density(rand_exp_avg))
lines(density(rand_exp_avg))
hist(rand_exp_avg)
lines(density(rand_exp_avg))
hist(rand_exp_avg,prob=T)
?hist
hist(rand_exp_avg)
hist(rand_exp_avg,breaks=50)
hist(rand_exp_avg,breaks=150)
hist(rand_exp_avg,breaks=15)
abline(v=mean(rand_exp_avg),col="blue")
hist(rand_exp_avg,breaks=15)
abline(v=5,col="red")
abline(v=mean(rand_exp_avg),col="blue")
hist(rand_exp_avg,breaks=15)
lines(density(rand_exp_avg))
hist(rand_exp_avg,breaks=15, prob=T)
lines(density(rand_exp_avg))
abline(v=5,col="red")
lines(density(rand_exp_avg))
abline(v=5,col="red")
hist(rand_exp_avg,breaks=15, prob=T)
abline(v=5,col="red")
lines(density(rand_exp_avg))
hist(rand_exp_avg,breaks=15, prob=T, main="Distribution of Simulation",xlab="Value")
abline(v=5,col="red")
lines(density(rand_exp_avg))
?var
var(rand_exp_avg)
?dexp
hist(rand_exp_avg,breaks=15, prob=T, main="Distribution of Simulation",xlab="Value")
abline(v=5,col="red")
lines(density(rand_exp_avg))
lines(dexp(c(0,.5,1),rate=.2))
lines(pexp(c(0,.5,1),rate=.2))
hist(rand_exp_avg,breaks=15, prob=T, main="Distribution of Simulation",xlab="Value")
abline(v=5,col="red")
lines(density(rand_exp_avg))
lines(pexp(c(0,.5,1),rate=.2))
?seq
hist(rand_exp_avg,breaks=15, prob=T, main="Distribution of Simulation",xlab="Value")
abline(v=5,col="red")
lines(density(rand_exp_avg))
lines(pexp(seq(0,1,.01)),rate=.2))
lines(pexp(seq(0,1,by=.01),rate=.2))
hist(rand_exp_avg,breaks=15, prob=T, main="Distribution of Simulation",xlab="Value")
abline(v=5,col="red")
lines(density(rand_exp_avg))
lines(qexp(seq(0,1,by=.01),rate=.2))
hist(rand_exp_avg,breaks=15, prob=T, main="Distribution of Simulation",xlab="Value")
abline(v=5,col="red")
lines(density(rand_exp_avg))
lines(density(qexp(seq(0,1,by=.01),rate=.2)))
hist(rand_exp_avg,breaks=15, prob=T, main="Distribution of Simulation",xlab="Value")
abline(v=5,col="red")
lines(density(rand_exp_avg),col="blue")
lines(density(qexp(seq(0,1,by=.01),rate=.2)),col="red")
legend('topright', c("simulation", "theoretical"), lty=c(1,2), col=c("blue", "red"))
hist(rand_exp_avg,breaks=15, prob=T, main="Distribution of Simulation",xlab="Value")
abline(v=5,col="red")
lines(density(rand_exp_avg),col="blue")
lines(density(qexp(seq(0,1,by=.01),rate=.2)),col="red")
legend('topright', c("Simulation", "Theoretical"), lty=c(1,2), col=c("blue", "red"))
hist(rand_exp_avg,breaks=15, prob=T, main="Distribution of Simulation",xlab="Value")
abline(v=5,col="red")
lines(density(rand_exp_avg),col="blue")
lines(density(qexp(seq(0,1,by=.01),rate=.2)),col="red")
legend('topright', c("Simulation", "Theoretical"), col=c("blue", "red"))
hist(rand_exp_avg,breaks=15, prob=T, main="Distribution of Simulation",xlab="Value")
abline(v=5,col="red")
lines(density(rand_exp_avg),col="blue")
lines(density(qexp(seq(0,1,by=.01),rate=.2)),col="red")
legend('topright', c("Simulation", "Theoretical"), lty=c(1,2), col=c("blue", "red"))
mean(rand_exp_avg)
var(rand_exp_avg)
?qnorm
hist(rand_exp_avg,breaks=15, prob=T, main="Distribution of Simulation",xlab="Value")
abline(v=5,col="red")
lines(density(rand_exp_avg),col="blue")
lines(density(qexp(seq(0,1,by=.01),rate=.2)),col="red")
legend('topright', c("Simulation", "Theoretical"), lty=c(1,2), col=c("blue", "red"))
lines(density(qnorm(seq(0,1,by=.01),mean(rand_exp_avg),var(rand_exp_avg))))
lines(density(qnorm(seq(0,1,by=.001),mean(rand_exp_avg),var(rand_exp_avg))))
lines(density(qnorm(seq(0,2,by=.001),mean(rand_exp_avg),var(rand_exp_avg))))
hist(rand_exp_avg,breaks=15, prob=T, main="Distribution of Simulation",xlab="Value")
abline(v=5,col="red")
lines(density(rand_exp_avg),col="blue")
lines(density(qexp(seq(0,1,by=.01),rate=.2)),col="red")
legend('topright', c("Simulation", "Theoretical"), lty=c(1,2), col=c("blue", "red"))
lines(density(qnorm(seq(0,1,by=.01),mean(rand_exp_avg),var(rand_exp_avg))))
data <- read.csv("C:/SPARE/DATASETS/Pipeline/SFM_201406Extract.txt",stringsAsFactors=F)
colnames(data) <- c('INVENTORY_DATE', 'SOURCE', 'CMPYNO', 'TREATYID', 'BENEFITID', 'POLICYID', 'JOINTID', 'CLIENTPOLNO', 'POL_STATUS', 'XNL', 'POLSEX', 'UWCLASS', 'AUTO_FAC', 'SYNDICATE', 'RATING_FACTOR', 'DOB', 'ISSUE_AGE', 'ISSUE_DATE', 'DATE_ON_RISK', 'DATE_ON_BOOKS', 'PREM_FREQ', 'ORIG_FACE_AAR', 'INFORCE_AAR', 'FLAT_XTRA', 'XTRA_DURATION', 'LIFE_REIN_FACE', 'LIFE_ANNL_DECR', 'FUT_ANNL_DECR', 'QUOTE_DATE', 'TERM', 'CED_TREATYID', 'RATING_GROUP', 'NEW_SYNDICATE', 'JOB_CLASS', 'GROSSUP_RATIO', 'SAMPCODE', 'BAD_POLICY', 'ACQ_METHOD', 'TREATY#', 'BENEFIT#', 'COVER_BASIS', 'COMMISSION_PCT', 'REBATE_SACRIFICE_PCT', 'TOBACCO_USE', 'DEATH_BEN_OPTION','RIDER_INDICATOR')
data2 <- aggregate(list(data$INFORCE_AAR,data$BENEFITID), by=list(data$RIDER_INDICATOR,data$POLSEX,data$UWCLASS,data$RATING_FACTOR,data$ISSUE_AGE,data$ISSUE_DATE,data$PREM_FREQ,data$FLAT_XTRA,data$XTRA_DURATION),FUN=sum)
colnames(data2) <- c('RIDER_INDICATOR','POLSEX','UWCLASS','RATING_FACTOR','ISSAGE','ISSDATE','PREMFREQ','FLATXTRA','XTRADUR','INFORCE_AAR','POLCNT')
str(data2)
str(data)
data <- read.csv("C:/SPARE/DATASETS/Pipeline/SFM_201406Extract.txt",stringsAsFactors=F,
col.names = c('INVENTORY_DATE', 'SOURCE', 'CMPYNO', 'TREATYID', 'BENEFITID', 'POLICYID', 'JOINTID', 'CLIENTPOLNO', 'POL_STATUS', 'XNL', 'POLSEX', 'UWCLASS', 'AUTO_FAC', 'SYNDICATE', 'RATING_FACTOR', 'DOB', 'ISSUE_AGE', 'ISSUE_DATE', 'DATE_ON_RISK', 'DATE_ON_BOOKS', 'PREM_FREQ', 'ORIG_FACE_AAR', 'INFORCE_AAR', 'FLAT_XTRA', 'XTRA_DURATION', 'LIFE_REIN_FACE', 'LIFE_ANNL_DECR', 'FUT_ANNL_DECR', 'QUOTE_DATE', 'TERM', 'CED_TREATYID', 'RATING_GROUP', 'NEW_SYNDICATE', 'JOB_CLASS', 'GROSSUP_RATIO', 'SAMPCODE', 'BAD_POLICY', 'ACQ_METHOD', 'TREATY#', 'BENEFIT#', 'COVER_BASIS', 'COMMISSION_PCT', 'REBATE_SACRIFICE_PCT', 'TOBACCO_USE', 'DEATH_BEN_OPTION','RIDER_INDICATOR'),
colClasses=c("CLIENTPOLNO"="numeric"))
policy <- data[data$CLIENTPOLNO==data[3,1:8],]
policy <- data[data$CLIENTPOLNO==data[3,1],]
policy <- data[data$CLIENTPOLNO==data[1:3,8],]
policy <- data[data$CLIENTPOLNO==data[1:10,8],]
policy <- data[data$CLIENTPOLNO==data[1,8],]
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu <-.3
x[1]
w[1]*(x[1] - mu)^2
w[1]*(x[1] - mu)^2 + w[2]*(x[2] - mu)^2 + w[3]*(x[3] - mu)^2
mu <-1.077
w[1]*(x[1] - mu)^2 + w[2]*(x[2] - mu)^2 + w[3]*(x[3] - mu)^2
mu <-.1471
w[1]*(x[1] - mu)^2 + w[2]*(x[2] - mu)^2 + w[3]*(x[3] - mu)^2
mu <-.0025
w[1]*(x[1] - mu)^2 + w[2]*(x[2] - mu)^2 + w[3]*(x[3] - mu)^2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(I(x - mean(x))~ I(y - mean(y)))
lm(I(x - mean(x))~ I(y - mean(y)) - 1)
data(mtcars)
str(mtcars)
lm(I(mtcars$mpg - mean(mtcars$mpg))~I(mtcars$wt - mean(mtcars$wt)))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
variance(x)
var(x)
var(x)^.5
(x[-1] - mean(x)) / (var(x)^.5)
(x[1] - mean(x)) / (var(x)^.5)
lm(I(x - mean(x))~ I(y - mean(y)))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(I(x - mean(x))~ I(y - mean(y)))
lm(x~ Y)
lm(x~ y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
lm(x~x)
(x[1] - mu)^2 + (x[2] - mu)^2 + (x[3] - mu)^2 + (x[4] - mu)^2 + (x[5] - mu)^2 + (x[6] - mu)^2 + (x[7] - mu)^2 + (x[8] - mu)^2 + (x[9] - mu)^2 + (x[10] - mu)^2
mu <- .573
(x[1] - mu)^2 + (x[2] - mu)^2 + (x[3] - mu)^2 + (x[4] - mu)^2 + (x[5] - mu)^2 + (x[6] - mu)^2 + (x[7] - mu)^2 + (x[8] - mu)^2 + (x[9] - mu)^2 + (x[10] - mu)^2
mu <- .8
(x[1] - mu)^2 + (x[2] - mu)^2 + (x[3] - mu)^2 + (x[4] - mu)^2 + (x[5] - mu)^2 + (x[6] - mu)^2 + (x[7] - mu)^2 + (x[8] - mu)^2 + (x[9] - mu)^2 + (x[10] - mu)^2
mu <- .36
(x[1] - mu)^2 + (x[2] - mu)^2 + (x[3] - mu)^2 + (x[4] - mu)^2 + (x[5] - mu)^2 + (x[6] - mu)^2 + (x[7] - mu)^2 + (x[8] - mu)^2 + (x[9] - mu)^2 + (x[10] - mu)^2
mu <- .44
(x[1] - mu)^2 + (x[2] - mu)^2 + (x[3] - mu)^2 + (x[4] - mu)^2 + (x[5] - mu)^2 + (x[6] - mu)^2 + (x[7] - mu)^2 + (x[8] - mu)^2 + (x[9] - mu)^2 + (x[10] - mu)^2
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu <-.0025
w[1]*(x[1] - mu)^2 + w[2]*(x[2] - mu)^2 + w[3]*(x[3] - mu)^2 + w[4]*(x[4] - mu)^2
mu <-.1471
w[1]*(x[1] - mu)^2 + w[2]*(x[2] - mu)^2 + w[3]*(x[3] - mu)^2 + w[4]*(x[4] - mu)^2
mu <-1.077
w[1]*(x[1] - mu)^2 + w[2]*(x[2] - mu)^2 + w[3]*(x[3] - mu)^2 + w[4]*(x[4] - mu)^2
mu <-.3
w[1]*(x[1] - mu)^2 + w[2]*(x[2] - mu)^2 + w[3]*(x[3] - mu)^2 + w[4]*(x[4] - mu)^2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(X~ Y- 1)
lm(x~y- 1)
lm(x~y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
lm(y~x-1)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
?mtcars
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344) 5
fit <- lm(y ~ x)
hatvalues(fit)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
hatvalues(fit)
?hatvalues
dfbetas(fit)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
install.packages(rattle)
install.packages("rattle")
set.seed(125)
inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
modFit <- train(Class ~ ., data = train, method = "rpart")
modFit <- train(Class ~ ., data = train, method = "rpart")
install.packages("rpart")
library(rpart)
modFit <- train(Class ~ ., data = train, method = "rpart")
install.packages('e1071', dependencies=TRUE)
modFit <- train(Class ~ ., data = train, method = "rpart")
modFit$finalModel
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit)
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit)
fancyRpartPlot(modFit)
predict(modFit, newdata = train)
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .7)
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .7)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
library(caret)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
install.packages("randomForest")
library(randomForest)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
a
varImp(a)
library(datasets)
data(mtcars)
mtcarsmodel1 <- lm(mpg ~ am, data = mtcars)
summary(mtcarsmodel1)
library(datasets)
data(mtcars)
str(strmtr)
str(mtcars)
mtcarsmodel1 <- lm(mpg ~ am - 1, data = mtcars)
summary(mtcarsmodel1)
mtcarsmodel1 <- lm(mpg ~ am, data = mtcars)
summary(mtcarsmodel1)
mtcarsmodel1 <- lm(mpg ~ am - 1, data = mtcars)
summary(mtcarsmodel1)
mtcarsmodel1 <- lm(mpg ~ factor(am), data = mtcars)
summary(mtcarsmodel1)
mtcarsmodel1 <- lm(mpg ~ factor(am) - 1, data = mtcars)
summary(mtcarsmodel1)
str(mtcars)
mtcarsmodel1 <- lm(mpg ~ factor(am) - 1, data = mtcars)
summary(mtcarsmodel1)
boxplot(mpg ~ am,data=mtcars)
?boxplot
boxplot(mpg ~ am,data=mtcars,ylab="MPG",xlab=c("Auto","Manual"))
mtcars$am[mtcars$am==0] <- "Automatic"
mtcars$am[mtcars$am==1] <- "Manual"
str(mtcars)
mtcarsmodel1 <- lm(mpg ~ factor(am) - 1, data = mtcars)
summary(mtcarsmodel1)
boxplot(mpg ~ am,data=mtcars,ylab="MPG")
boxplot(mpg ~ am,data=mtcars,ylab="MPG",col=c("red","grey"))
boxplot(mpg ~ am,data=mtcars,ylab="MPG",col=c("red","darkgrey"))
boxplot(mpg ~ am,data=mtcars,ylab="MPG",col=c("red","darkgrey"),main="MPG by Trans Type")
library(datasets)
data(mtcars)
str(mtcars)
mtcars$am[mtcars$am==0] <- "Automatic"
mtcars$am[mtcars$am==1] <- "Manual"
summary(mtcarsmodel1)
mtcarsmodel1 <- lm(mpg ~ factor(am) - 1, data = mtcars)
boxplot(mpg ~ am,data=mtcars,ylab="MPG",col=c("red","darkgrey"),main="MPG by Trans Type")
str(mtcars)
mtcarsmodel1 <- lm(mpg ~ factor(am) + cyl + wt - 1, data = mtcars)
summary(mtcarsmodel1)
mtcarsmodel1 <- lm(mpg ~ factor(am) + cyl + wt, data = mtcars)
summary(mtcarsmodel1)
mtcarsmodel1 <- lm(mpg ~ factor(am) + cyl + wt - 1, data = mtcars)
summary(mtcarsmodel1)
?anova
mtcarsmodel <- lm(mpg ~ factor(am) + cyl + wt - 1, data = mtcars)
summary(mtcarsmodel1)
summary(mtcarsmodel)
boxplot(mpg ~ am,data=mtcars,ylab="MPG",col=c("red","darkgrey"),main="MPG by Trans Type")
anova(mtcarsmodel)
?anova
mtcarsmodel <- lm(mpg ~ factor(am) + cyl + wt - 1, data = mtcars)
resid(mtcarsmodel)
plot(resid(mtcarsmodel))
plot(resid(mtcarsmodel),ylab="Residuals",xlab="MPG")
plot(resid(mtcarsmodel),ylab="Residuals",xlab="Index")
plot(resid(mtcarsmodel),ylab="Residuals",xlab="Record")
plot(resid(mtcarsmodel),ylab="Residuals",xlab="Record",Main="Residual Plot")
plot(resid(mtcarsmodel),ylab="Residuals",xlab="Record",Main="Residual Plot")
plot(resid(mtcarsmodel),ylab="Residuals",xlab="Record")
plot(resid(mtcarsmodel),ylab="Residuals",xlab="Record",col="Red")
?plot
plot(resid(mtcarsmodel),ylab="Residuals",xlab="Record",col="Red",main="Residual Plot")
?plot
plot(resid(mtcarsmodel),ylab="Residuals",xlab="Record",col="Red",main="Residual Plot")
abline(0)
abline(a=0,b=0)
abline(a=0)
confint(mtcarsmodel)
par(pin=c(3,3))
boxplot(mpg ~ am,data=mtcars,ylab="MPG",col=c("red","darkgrey"),main="MPG by Trans Type")
par(pin=c(2,3))
boxplot(mpg ~ am,data=mtcars,ylab="MPG",col=c("red","darkgrey"),main="MPG by Trans Type")
par(pin=c(4,3))
boxplot(mpg ~ am,data=mtcars,ylab="MPG",col=c("red","darkgrey"),main="MPG by Trans Type")
library(shiny)
True_Max<-function(weight,reps,max_input){
CalcMax <- weight + weight * (reps - 1) / 30
(CalcMax + max_input) / 2
}
shinyServer(
function(input, output) {
output$inputweight <- renderPrint({input$weight})
output$inputreps <- renderPrint({input$reps})
output$inputmax <- renderPrint({input$max_input})
output$estimation <- renderPrint({True_Max(input$weight,input$reps,
input$max_input)})
}
)
library(shiny)
shinyUI(
pageWithSidebar(
# Application title
headerPanel("1RM Calculator"),
sidebarPanel(
numericInput('weight', 'Insert weight in pounds', 185) ,
numericInput('reps', 'Insert the max # of reps you performed at this weight', 10, min = 1, max = 99, step = 1),
numericInput('max_input', 'Estimate your 1RM',250),
submitButton('Submit')
),
mainPanel(
h3('Your 1RM is:',align="Center"),
verbatimTextOutput("estimation"),
h4('Background of Calculator',align="Center"),
p('The strength program, Wendler 5/3/1, includes a formula that calculates an estimated 1 rep max.'),
p('The formula is: Weight + Weight x Reps x .0333'),
p('This formula is implying your 1RM is 3.33% higher for every rep you do. However, This formula overestimates your true 1RM because if you were to input 1 rep for any given weight, the result would be Weight + Weight x .0333, which would clearly overstate your 1RM by 3.33%.'),
p('Also, every individual is different and the formula cannot consider each individual scenario, SO......my formula for 1RM is the following'),
tags$div(
tags$ul(
tags$li('The Median of:'),
tags$li('A:  Weight + Weight x (Reps - 1) x .033'),
tags$li('B:  Your estimated 1RM')
)
),
h4('Below are your inputs',align="Center"),
p('Weight:'), verbatimTextOutput("inputweight"),
p('Max Reps:'), verbatimTextOutput("inputreps"),
p('Estimated Max:'), verbatimTextOutput("inputmax")
)
)
)
library("shiny", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("shinyapps", lib.loc="C:/Program Files/R/R-3.1.1/library")
shinyapps::setAccountInfo(name='knobbe', token='629BB6680A8F7C160EF4BA7553C60CEE', secret='68x098GHT2eGGOQjheZYr+kT4Q/m9WDtwiXHj1kY')
setwd("C:/Users/knobbe/Documents/PTO, Time Sheets, etc/Coursera/Data Science Specialization/9. Data Products/1RM_Calculator")
shinyapps::deployApp(appName="1RM_Calculator")
??shinyAppDir
file.edit('~/.Rprofile')
options(rpubs.upload.method = "internal")
